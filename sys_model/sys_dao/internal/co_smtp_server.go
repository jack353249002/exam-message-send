// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CoSmtpServerDao is the data access object for table co_smtp_server.
type CoSmtpServerDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns CoSmtpServerColumns // columns contains all the column names of Table for convenient usage.
}

// CoSmtpServerColumns defines and stores column names for table co_smtp_server.
type CoSmtpServerColumns struct {
	Id             string //
	SmtpServer     string //
	SmtpPassword   string //
	Title          string //
	SmtpSendEmail  string //
	Port           string //
	MaxConcurrency string //
}

// coSmtpServerColumns holds the columns for table co_smtp_server.
var coSmtpServerColumns = CoSmtpServerColumns{
	Id:             "id",
	SmtpServer:     "smtp_server",
	SmtpPassword:   "smtp_password",
	Title:          "title",
	SmtpSendEmail:  "smtp_send_email",
	Port:           "port",
	MaxConcurrency: "max_concurrency",
}

// NewCoSmtpServerDao creates and returns a new DAO object for table data access.
func NewCoSmtpServerDao(proxy ...dao_interface.IDao) *CoSmtpServerDao {
	var dao *CoSmtpServerDao
	if len(proxy) > 0 {
		dao = &CoSmtpServerDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: coSmtpServerColumns,
		}
		return dao
	}

	return &CoSmtpServerDao{
		group:   "default",
		table:   "co_smtp_server",
		columns: coSmtpServerColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CoSmtpServerDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CoSmtpServerDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *CoSmtpServerDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *CoSmtpServerDao) Columns() CoSmtpServerColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CoSmtpServerDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *CoSmtpServerDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CoSmtpServerDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
